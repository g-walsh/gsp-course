library('knitr')
plot(rnorm(100))
plot(rnorm(100))
q()
install.packages("~/Downloads/phom_1.0.1.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/phom_1.0.2.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/phom_1.0.2.tgz.crdownload", repos = NULL)
install.packages("~/Downloads/phom_1.0.2.tar.gz", repos = NULL, type = "source")
datafilename="http://personality-project.org/R/datasets/R.appendix1.data"
datafilename
data.ex1=read.table(datafilename,header=T)
data.ex1=read.table(datafilename,header=T)
datafilename="http://personality-project.org/R/datasets/R.appendix1.data"
data.ex1=read.table(datafilename,header=T)
getwd()
plot(rnorm(100))
setwd("/Volumes/ROBERT/ShinyApp.TumorGrowth_Analysis(1.2.1)")
library(shiny)
runApp(getwd())
install.packages('statmode')
install.packages('statmod')
library(shiny)
library(statmod)
library(reshape)
library(ggplot2)
library(knitr)
library(mailR)
library(pander)
library(lmerTest)
library(gridExtra) ## for multiple ggplots
library(effects)
install.packages('knitr')
install.packages('pander')
library(shiny)
library(statmod)
library(reshape)
library(ggplot2)
library(knitr)
library(mailR)
sessionInfo()
library(pander)
library(lmerTest)
library(gridExtra) ## for multiple ggplots
library(effects)
runAPp()
runApp(getwd())
load("/Volumes/ROBERT/Jon Hatcher/analysis2_pararell.R")
library(compiler) ## requires R >= 2.
logistic.map <- function(r, x, N, M){
## r: bifurcation parameter, x: initial value
## N: number of iterations, M: iterations to be returned
z <- 1:N
z[1] <- x
for(i in c(1:(N-1))){
z[i+1] <- r *z[i]  * (1 - z[i])
}
z[c((N-M):N)]
}
logistic.map <- cmpfun(logistic.map)
r <- seq(2.8, 4, by=0.005)
N <- 200; M <- 100; start.x <- 0.25
Orbit <- as.vector(sapply(r, logistic.map, x=start.x, N=N, M=M))
r <- rep(r, each=(M+1))
plot(Orbit ~ r, pch=15, cex=0.5)
load("/Volumes/ROBERT7/Study design_Dual-Flank/power_analysis.R")
load("/Volumes/ROBERT7/Study design_Dual-Flank/power_analysis.R")
library(devtools)
install_github("xeno-fix",username = "borgmaan") # install it
library(XenoCat) # loads the patched version now
library(shiny)
setwd("~/Desktop/ShinyApp.gdrate - Copy")
runApp(getwd())
rm(list=ls())
setwd("~/Desktop/ShinyApp.gdrate.simulate")
library(shiny)
runApp(getwd())
runApp(getwd())
runApp(getwd())
xx <- c(c(1,0.1, 0, 1),
c(2, 0.07, 0 , 1),
c(3, 0.03, 0,1),
c(4, 0.05, 0.55, 1),
c(5, 0.02, 0.55, 1),
c(6, 0, 0.55, 1))
xx
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
dir()
getwd()
runApp(getwd())
dir()
Data <- read.csv('Simulated_data.csv')
head(Data)
Data <- Data[, 3:ncol(Data)] ## takes No and timepoints (omits Study and Treatment)
colnames(Data)[1]  <- 'ID' ## replace 'No' with 'ID'
head(Data)
Data.time <- Data
for(i in 2:ncol(Data.time)){
Data.time[, i] <- i-1
colnames(Data.time)[i] <- paste0('time.',i)
}
Data.time
s1 <- step1measures(Data=Data, Time=Data.time, ID=TRUE)
Data <- read.csv('Simulated_data.csv')
head(Data)
Data1 <- cast(Data, Study + Treatment + No ~ Timepoint, value.var='rates')
head(Data1)
Data <- read.csv('Simulated_data.csv')
Data1 <- cast(Data, Study + Treatment + No ~ Timepoint, value='rates')
Data1 <- cast(Data, Study + Treatment + No ~ Timepoint, value.var='rates')
Data <- read.csv('Simulated_data.csv')
Data.wide <- cast(Data, Study + Treatment + No ~ Timepoint, value.var='rates')
colnames(Data.wide)[4:ncol(Data.wide)]  <- paste0('Tp',colnames(Data.wide)[3:ncol(Data.wide)])
Data <- read.csv('Simulated_data.csv')
Data.wide <- cast(Data, Study + Treatment + No ~ Timepoint, value.var='rates')
Data.wide <- Data.wide[, 3:ncol(Data.wide)] ## takes No and timepoints (omits Study and Treatment)
colnames(Data.wide)[4:ncol(Data.wide)]  <- paste0('Tp',colnames(Data.wide)[3:ncol(Data.wide)])
Data <- read.csv('Simulated_data.csv')
Data.wide <- cast(Data, Study + Treatment + No ~ Timepoint, value.var='rates')
head(data)
head(Data)
head(Data.wide)
Data <- read.csv('Simulated_data.csv')
Data.wide <- cast(Data, Study + Treatment + No ~ Timepoint, value.var='rates')
Data.wide <- Data.wide[, 3:ncol(Data.wide)] ## takes No and timepoints (omits Study and Treatment)
colnames(Data.wide)[4:ncol(Data.wide)]  <- paste0('Tp',colnames(Data.wide)[4:ncol(Data.wide)])
head(Data.wide)
Data <- read.csv('Simulated_data.csv')
Data.wide <- cast(Data, Study + Treatment + No ~ Timepoint, value.var='rates')
colnames(Data.wide)[4:ncol(Data.wide)]  <- paste0('Tp',colnames(Data.wide)[4:ncol(Data.wide)])
Data.wide <- Data.wide[, 3:ncol(Data.wide)] ## takes No and timepoints (omits Study and Treatment)
head(Data.wide)
colnames(Data.wide)[1]  <- 'ID' ## replace 'No' with 'ID'
Data.time <- Data
for(i in 2:ncol(Data.time)){
Data.time[, i] <- i-1
colnames(Data.time)[i] <- paste0('time.',i)
}
Data.time
Data <- Data.wide
Data.time <- Data
for(i in 2:ncol(Data.time)){
Data.time[, i] <- i-1
colnames(Data.time)[i] <- paste0('time.',i)
}
s1 <- step1measures(Data=Data, Time=Data.time, ID=TRUE)
s2 <- step2factors(s1, num.factors=2)
s3 <- step3clusters(s2, nclusters = as.numeric(input $ nbr_clusters))
s1 <- step1measures(Data=Data, Time=Data.time, ID=TRUE)
s2 <- step2factors(s1, num.factors=2)
s3 <- step3clusters(s2, nclusters = 2)
Data <- merge(Data, s3 $ clusters, by='ID')
head(Data)
write.csv(Data, file='Simulated_data_with_class.csv', row.names=FALSE)
Data <- read.csv('Simulated_data.csv')
Data.wide <- cast(Data, Study + Treatment + No ~ Timepoint, value.var='rates')
colnames(Data.wide)[4:ncol(Data.wide)]  <- paste0('Tp',colnames(Data.wide)[4:ncol(Data.wide)])
Data.wide <- Data.wide[, 3:ncol(Data.wide)] ## takes No and timepoints (omits Study and Treatment)
colnames(Data.wide)[1]  <- 'ID' ## replace 'No' with 'ID'
Data <- Data.wide
## Auxiliary file with timepoints
Data.time <- Data
for(i in 2:ncol(Data.time)){
Data.time[, i] <- i-1
colnames(Data.time)[i] <- paste0('time.',i)
}
s1 <- step1measures(Data=Data, Time=Data.time, ID=TRUE)
s2 <- step2factors(s1, num.factors=2)
s3 <- step3clusters(s2, nclusters = 3)
Data <- merge(Data, s3 $ clusters, by='ID')
write.csv(Data, file='Simulated_data_with_class.csv', row.names=FALSE)
Data.clus.long <- melt(Data, id.vars=c('ID', 'cluster'))
Data.clus.long <- transform(Data.clus.long, cluster=as.factor(cluster))
colnames(Data.clus.long) <- c('ID', 'Cluster', 'Timepoint', 'Rate')
Data.clus.long <- transform(Data.clus.long, Timepoint=as.numeric(sub('Tp','', Timepoint)))
p <- ggplot(Data.clus.long, aes(x=Timepoint, y=Rate, group=ID, col=Cluster, label=ID)) +
geom_point(size=1.9) +
geom_line(lty=1, lwd=0.5) +
scale_x_continuous(breaks = unique(Data.clus.long $ Timepoint)) +
geom_text(col='black', size=4.5) +
ylab('Response rate: T/T0')
print(p)
p <- ggplot(Data.clus.long, aes(x=Timepoint, y=Rate, group=ID, col=Cluster)) +
geom_point(size=1.9) +
geom_line(lty=1, lwd=0.5) +
scale_x_continuous(breaks = unique(Data.clus.long $ Timepoint)) +
#geom_text(col='black', size=4.5) +
ylab('Response rate: T/T0')
print(p)
rm(list=ls())
library(shiny)
runApp(getwd())
library(shiny)
runApp(getwd())
